{"version":3,"sources":["GlobalStyles.js","theme.js","gameSlice.js","setAdjacentFields.js","GameField/styled.js","GameField/useGameField.js","GameField/index.js","StartingScreen/styled.js","StartingScreen/useStartingScreen.js","StartingScreen/index.js","Container/styled.js","Container/index.js","App.js","gameSaga.js","store.js","index.js"],"names":["GlobalStyle","createGlobalStyle","theme","color","background","font","difficultyButtonColor","easyButton","mediumButton","hardButton","breakpoint","mobileMax","gameSlice","createSlice","name","initialState","started","dimensions","width","height","area","adjacentFields","fields","startingId","mines","quantity","ids","uncoveredFields","win","reducers","startGame","state","setDimensions","payload","generateFields","i","push","id","uncovered","marked","mine","minesAround","addAdjacentFields","forEach","field","thisField","setAdjacentFields","setStartingId","generateMines","mineId","Math","floor","random","includes","plantMines","setMinesAround","minedFields","filter","minesAroundList","number","mineAround","length","uncoverField","uncoverSafeFields","adjacenField","find","uncoverWhenSomethingUncovered","adjacentList","undefined","markField","setWin","markedMines","minesQuantity","resetGame","actions","selectGame","game","selectStarted","selectDimensions","selectFields","selectStartingId","selectUncoveredFields","selectWin","Grid","styled","div","Button","button","useGameField","dispatch","useDispatch","uncoveredField","useSelector","useEffect","alert","event","preventDefault","GameField","onFirstClick","onLeftClick","onRightClick","map","disabled","onClick","onContextMenu","Container","section","Header","h1","Text","p","Subheader","h2","FlexBox","difficulty","css","useStartingScreen","setNewGame","StartingScreen","onStartClick","StyledContainer","main","children","App","setStartingIDhandler","gameSaga","select","put","takeLatest","type","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","gameReducer","middleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.77585368.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n        margin: 0;\r\n        padding: 0;\r\n        background: ${({ theme }) => theme.color.background};\r\n        color: ${({ theme }) => theme.color.font}\r\n    }\r\n`;","export const theme = {\r\n    color: {\r\n        background: \"#ccc\",\r\n        font: \"#444\",\r\n        difficultyButtonColor: \"#444\",\r\n        easyButton: \"#b0fb7e\",\r\n        mediumButton: \"#fbfb7e\",\r\n        hardButton: \"#fc8282\"\r\n    },\r\n    breakpoint:{\r\n        mobileMax: 767\r\n    }\r\n}","import { createSlice } from \"@reduxjs/toolkit\"\r\nimport { setAdjacentFields } from \"./setAdjacentFields\";\r\n\r\n\r\nconst gameSlice = createSlice({\r\n    name: \"game\",\r\n    initialState: {\r\n        started: false,\r\n        dimensions: {\r\n            width: 0,\r\n            height: 0,\r\n            area: 0,\r\n            adjacentFields: [],\r\n\r\n        },\r\n        fields: [],\r\n        startingId: false,\r\n        mines: {\r\n            quantity: 0,\r\n            ids: [],\r\n        },\r\n        uncoveredFields: [],\r\n        win: false\r\n    },\r\n    reducers: {\r\n        startGame: state => {\r\n            state.started = true;\r\n        },\r\n        setDimensions: (state, { payload }) => {\r\n            state.dimensions.height = payload.height;\r\n            state.dimensions.width = payload.width;\r\n            state.dimensions.area = payload.width * payload.height;\r\n        },\r\n        generateFields: (state) => {\r\n            const dimensions = state.dimensions;\r\n            let i;\r\n            for (i = 1; i < dimensions.area + 1; i++) {\r\n                state.fields.push({\r\n                    id: i,\r\n                    uncovered: false,\r\n                    marked: false,\r\n                    mine: false,\r\n                    adjacentFields: [],\r\n                    minesAround: 0\r\n                }\r\n                );\r\n            };\r\n\r\n        },\r\n        addAdjacentFields: (state) => {\r\n            const fields = state.fields;\r\n            const dimensions = state.dimensions;\r\n            fields.forEach((field) => {\r\n                field.adjacentFields = setAdjacentFields(dimensions, field);\r\n            });\r\n        },\r\n        setStartingId: (state, { payload }) => {\r\n            state.startingId = payload;\r\n        },\r\n        generateMines: ({ mines, dimensions }, { payload }) => {\r\n            const area = dimensions.area;\r\n            mines.quantity = payload.quantity;\r\n            const id = payload.id;\r\n            let i;\r\n            let mineId = id;\r\n            while (mineId === id) {\r\n                mineId = Math.floor((Math.random() * area) + 1);\r\n            };\r\n            mines.ids.push(mineId);\r\n            for (i = 1; i < payload.quantity; i++) {\r\n                mineId = Math.floor((Math.random() * area) + 1);\r\n                while (mineId === id || mines.ids.includes(mineId)) {\r\n                    mineId = Math.floor((Math.random() * area) + 1);\r\n                }\r\n                mines.ids.push(mineId);\r\n\r\n            }\r\n        },\r\n        plantMines: ({ mines, fields }) => {\r\n            fields.forEach((field) => {\r\n                if (mines.ids.includes(field.id)) {\r\n                    field.mine = true;\r\n                }\r\n            })\r\n        },\r\n        setMinesAround: (state) => {\r\n            const fields = state.fields\r\n            const minedFields = fields.filter(({ mine }) => mine === true)\r\n\r\n            fields.forEach((field) => {\r\n                let minesAroundList = []\r\n                field.adjacentFields.forEach((number) => {\r\n                    const mineAround = minedFields.filter(({ id }) => id === number);\r\n                    if (mineAround.length > 0) {\r\n                        minesAroundList.push(mineAround)\r\n                    }\r\n                })\r\n                field.minesAround = minesAroundList.length\r\n            })\r\n        },\r\n        uncoverField: (state, { payload }) => {\r\n            const i = payload\r\n            state.fields[i].uncovered = true;\r\n            state.uncoveredFields.push(state.fields[i].id)\r\n        },\r\n        uncoverSafeFields: (state, { payload }) => {\r\n            const fields = state.fields;\r\n            const i = payload;\r\n            fields[i].adjacentFields.forEach((number) => {\r\n                const adjacenField = fields.find(({ id }) => id === number);\r\n                adjacenField.uncovered = true;\r\n                state.uncoveredFields.push(adjacenField.id)\r\n            })\r\n        },\r\n        uncoverWhenSomethingUncovered: (state) => {\r\n            const fields = state.fields\r\n            fields.forEach((field) => {\r\n                if (field.mine === false && field.uncovered === false) {\r\n                    let adjacentList = []\r\n                    field.adjacentFields.forEach((number) => {\r\n                        const adjacenField = fields.find(({ id }) => id === number)\r\n                        adjacentList.push(adjacenField)\r\n                    })\r\n                    const adjacentSafeFields = adjacentList.find(({ mine, uncovered, minesAround }) => (\r\n                        mine === false && uncovered === true && minesAround === 0))\r\n                    if (adjacentSafeFields !== undefined) {\r\n                        field.uncovered = true\r\n                        state.uncoveredFields.push(field.id)\r\n                    }\r\n                }\r\n            });\r\n\r\n        },\r\n        markField: (state, { payload }) => {\r\n            const i = payload;\r\n            state.fields[i].marked = !state.fields[i].marked;\r\n        },\r\n        setWin: (state) => {\r\n            const fields = state.fields\r\n            const markedMines = fields.filter(({ marked, mine }) => marked === true && mine && true)\r\n            const minesQuantity = state.mines.quantity\r\n            if (markedMines.length === minesQuantity) {\r\n                state.win = true\r\n            }\r\n        },\r\n        resetGame: (state) => {\r\n            state.fields = []\r\n            state.mines = {\r\n                quantity: 0,\r\n                ids: [],\r\n            };\r\n            state.uncoveredFields = [];\r\n            state.startingId = undefined;\r\n            state.win = false\r\n        }\r\n    }\r\n});\r\n\r\nexport const {\r\n    startGame,\r\n    setDimensions,\r\n    generateFields,\r\n    addAdjacentFields,\r\n    setStartingId,\r\n    generateMines,\r\n    plantMines,\r\n    setMinesAround,\r\n    uncoverField,\r\n    uncoverSafeFields,\r\n    uncoverWhenSomethingUncovered,\r\n    markField,\r\n    setWin,\r\n    resetGame\r\n} = gameSlice.actions;\r\n\r\nexport const selectGame = state => state.game;\r\nexport const selectStarted = state => selectGame(state).started\r\nexport const selectDimensions = state => selectGame(state).dimensions\r\nexport const selectFields = state => selectGame(state).fields\r\nexport const selectStartingId = state => selectGame(state).startingId;\r\nexport const selectMines = state => selectGame(state).mines;\r\nexport const selectUncoveredFields = state => selectGame(state).uncoveredFields\r\nexport const selectWin = state => selectGame(state).win\r\nexport default gameSlice.reducer","export const setAdjacentFields = (dimensions, thisField) => {\r\n    const id = thisField.id\r\n    const width = dimensions.width\r\n    const height = dimensions.height\r\n    let adjacentFields\r\n    if (id === 1) {\r\n        adjacentFields = [id + 1, id + width, id + width + 1]\r\n        return adjacentFields\r\n    } else\r\n        if (id === width) {\r\n            adjacentFields = [id - 1, id + width, id + width - 1,]\r\n            return adjacentFields\r\n        } else\r\n            if (id === width * height - width + 1) {\r\n                adjacentFields = [id - width, id - width + 1, id + 1]\r\n                return adjacentFields\r\n            } else\r\n                if (id === width * height) {\r\n                    adjacentFields = [id - width, id - width - 1, id - 1]\r\n                    return adjacentFields\r\n                } else\r\n                    if (id < width) {\r\n                        adjacentFields = [id - 1, id + 1, id + width, id + width - 1, id + width + 1]\r\n                        return adjacentFields\r\n                    } else\r\n                        if (id % width === 1) {\r\n                            adjacentFields = [id - width, id - width + 1, id + 1, id + width, id + width + 1]\r\n                            return adjacentFields\r\n                        } else\r\n                            if (id % width === 0) {\r\n                                adjacentFields = [id - width, id - width - 1, id - 1, id + width, id + width - 1,]\r\n                                return adjacentFields\r\n                            } else\r\n                                if (id > (width * height - width) + 1) {\r\n                                    adjacentFields = [id - width, id - width - 1, id - width + 1, id - 1, id + 1];\r\n                                    return adjacentFields\r\n                                } else {\r\n                                    adjacentFields = [id - width, id - width - 1, id - width + 1, id - 1, id + 1, id + width, id + width - 1, id + width + 1]\r\n                                    return adjacentFields\r\n                                }\r\n\r\n}\r\n","import styled from \"styled-components\"\r\n\r\nexport const Grid = styled.div`\r\n    display: grid;\r\n    grid-template-columns: repeat(8, 1fr);\r\n    grid-template-rows: repeat(8, 1fr);\r\n    grid-gap: 2px;\r\n`\r\nexport const Button = styled.button`\r\n    min-width: 50px;\r\n    min-height: 50px;\r\n    border: 1px solid black;\r\n`","import { useEffect } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    generateMines,\r\n    markField,\r\n    plantMines,\r\n    resetGame,\r\n    selectFields,\r\n    selectUncoveredFields,\r\n    setMinesAround,\r\n    setStartingId,\r\n    setWin,\r\n    uncoverField,\r\n    uncoverSafeFields,\r\n    uncoverWhenSomethingUncovered\r\n} from \"../gameSlice\";\r\n\r\nconst useGameField = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const uncoveredField = useSelector(selectUncoveredFields);\r\n    const fields = useSelector(selectFields)\r\n\r\n    useEffect(() => { dispatch(uncoverWhenSomethingUncovered()) }, [uncoveredField, dispatch])\r\n\r\n    const onFirstClick = (id) => {\r\n        dispatch(generateMines({ quantity: 10, id: id }));\r\n        dispatch(plantMines());\r\n        dispatch(setMinesAround())\r\n        dispatch(setStartingId(id));\r\n    };\r\n\r\n    const onLeftClick = (id) => {\r\n        const i = id - 1;\r\n        dispatch(uncoverField(i));\r\n        if (fields[i].mine) {\r\n            alert(\"przegrałeś\")\r\n            dispatch(resetGame())\r\n        }\r\n        if (fields[i].minesAround === 0 && fields[i].mine === false) {\r\n            dispatch(uncoverSafeFields(i))\r\n        }\r\n\r\n    };\r\n\r\n    const onRightClick = (event, id) => {\r\n        event.preventDefault()\r\n        const i = id - 1;\r\n        dispatch(markField(i))\r\n        dispatch(setWin())\r\n    }\r\n\r\n    return [onFirstClick, onLeftClick, onRightClick]\r\n}\r\n\r\nexport default useGameField","import React from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\nimport {\r\n    selectDimensions,\r\n    selectFields,\r\n    selectStartingId,\r\n    selectWin,\r\n} from \"../gameSlice\"\r\nimport { Button, Grid } from \"./styled\"\r\nimport useGameField from \"./useGameField\"\r\n\r\n\r\nconst GameField = () => {\r\n\r\n    const fields = useSelector(selectFields);\r\n    const startingId = useSelector(selectStartingId);\r\n    const win = useSelector(selectWin);\r\n    const dimensions = useSelector(selectDimensions)\r\n\r\n    const [onFirstClick, onLeftClick, onRightClick] = useGameField()\r\n\r\n    return (\r\n        <>\r\n            {win ?\r\n                <h1>You Won</h1> :\r\n                <Grid\r\n                    width={dimensions.width}\r\n                    height={dimensions.height}\r\n                >\r\n                    {fields.map((field) =>\r\n                        <Button\r\n                            key={field.id}\r\n                            disabled={field.uncovered}\r\n                            onClick={startingId ? () => onLeftClick(field.id) : () => onFirstClick(field.id)}\r\n                            onContextMenu={(event) => onRightClick(event, field.id)}\r\n                        >\r\n                            {field.uncovered ? (field.mine ? \"!\" : (field.minesAround === 0 ? \"\" : field.minesAround)) : \"\"}\r\n                            {field.marked ? \"@\" : \"\"}\r\n                        </Button>\r\n                    )\r\n                    }\r\n                </Grid>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GameField","import styled, { css } from \"styled-components\"\r\n\r\nexport const Container = styled.section`\r\n    max-width: 668px;\r\n    margin: 0 auto;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        max-width: unset;\r\n        margin: 0 15px;\r\n    }\r\n`\r\n\r\nexport const Header = styled.h1`\r\n    text-align: center;\r\n    font-size: 36px;\r\n`\r\n\r\nexport const Text = styled.p`\r\n    text-align: justify;\r\n    font-size: 16px;\r\n`\r\n\r\nexport const Subheader = styled.h2`\r\n    font-size: 25px;\r\n    text-align: center;\r\n`\r\n\r\nexport const FlexBox = styled.div`\r\n    width: 100px;\r\n    margin: 0 auto;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: stretch;\r\n\r\n`\r\n\r\nexport const Button = styled.button`\r\n    padding: 10px 20px;\r\n    margin: 7px 0;\r\n    font-weight: bold;\r\n    border: 3px solid ${({ theme }) => theme.color.difficultyButtonColor};\r\n    color: ${({ theme }) => theme.color.difficultyButtonColor};\r\n\r\n    ${({ difficulty }) => difficulty === \"easy\" && css`\r\n        background-color: ${({ theme }) => theme.color.easyButton};\r\n    `}\r\n\r\n    ${({ difficulty }) => difficulty === \"medium\" && css`\r\n        background-color: ${({ theme }) => theme.color.mediumButton};\r\n    `}\r\n\r\n    ${({ difficulty }) => difficulty === \"hard\" && css`\r\n        background-color: ${({ theme }) => theme.color.hardButton};\r\n    `}\r\n`","\r\nimport { useDispatch } from \"react-redux\"\r\nimport { startGame, setDimensions, generateFields, addAdjacentFields, resetGame } from \"../gameSlice\"\r\n\r\n\r\nconst useStartingScreen = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const setNewGame = (height, width) => {\r\n        dispatch(setDimensions({ height: 8, width: 8 }));\r\n        dispatch(generateFields())\r\n        dispatch(addAdjacentFields())\r\n    }\r\n\r\n    const onStartClick = (height, width) => {\r\n        dispatch(startGame());\r\n        setNewGame(height, width);\r\n\r\n    }\r\n\r\n    const onResetClick = (height, width) => {\r\n        dispatch(resetGame());\r\n        setNewGame(height, width);\r\n    }\r\n\r\n    return [onStartClick, onResetClick]\r\n}\r\n\r\nexport default useStartingScreen","import React from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { selectStarted } from \"../gameSlice\"\r\nimport { Button, Container, FlexBox, Header, Subheader, Text } from \"./styled\";\r\nimport useStartingScreen from \"./useStartingScreen\";\r\n\r\n\r\nconst StartingScreen = () => {\r\n\r\n    const started = useSelector(selectStarted);\r\n    const [onStartClick] = useStartingScreen()\r\n\r\n\r\n    return !started && (\r\n        <Container>\r\n            <Header>\r\n                Minesweeper Game\r\n            </Header>\r\n            <Text>\r\n                Welcome\r\n            </Text>\r\n            <Subheader>\r\n                Chose Difficulty Level:\r\n            </Subheader>\r\n            <FlexBox>\r\n                <Button\r\n                    onClick={() => onStartClick()}\r\n                    difficulty=\"easy\"\r\n                >\r\n                    Easy\r\n                </Button>\r\n                <Button\r\n                    onClick={() => onStartClick()}\r\n                    difficulty=\"medium\"\r\n                >\r\n                    Medium\r\n                </Button>\r\n                <Button\r\n                    onClick={() => onStartClick()}\r\n                    difficulty=\"hard\"\r\n                >\r\n                    Hard\r\n                </Button>\r\n            </FlexBox>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default StartingScreen ","import styled from \"styled-components\"\r\n\r\nexport const StyledContainer = styled.main`\r\n    max-width: 1368px;\r\n    margin: 0 auto;\r\n`","import React from \"react\"\r\nimport { StyledContainer } from \"./styled\";\r\n\r\n\r\nconst Container = ({children}) => (\r\n    <StyledContainer>\r\n        {children}\r\n    </StyledContainer>\r\n);\r\n\r\nexport default Container","import React from \"react\"\nimport { GlobalStyle } from \"./GlobalStyles\"\nimport { ThemeProvider } from \"styled-components\"\nimport { theme } from \"./theme\"\nimport GameField from \"./GameField\"\nimport StartingScreen from \"./StartingScreen\"\nimport Container from \"./Container\"\n\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <Container>\n        <StartingScreen />\n        <GameField />\n      </Container>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { put, select, takeLatest, } from \"redux-saga/effects\"\r\nimport { selectStartingId, setStartingId, uncoverField, } from \"./gameSlice\"\r\n\r\nfunction* setStartingIDhandler() {\r\n    const id = yield select(selectStartingId)\r\n    yield put(uncoverField(id - 1))\r\n}\r\n\r\nexport function* gameSaga() {\r\n    yield takeLatest(setStartingId.type, setStartingIDhandler)\r\n}","import { configureStore } from \"@reduxjs/toolkit\"\r\nimport gameReducer from \"./gameSlice\"\r\nimport createSagaMiddleware from \"redux-saga\"\r\nimport { gameSaga } from \"./gameSaga\"\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        game: gameReducer,\r\n    },\r\n    middleware: [sagaMiddleware]\r\n});\r\n\r\nsagaMiddleware.run(gameSaga)\r\n\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider\n    store={store}\n    >\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}